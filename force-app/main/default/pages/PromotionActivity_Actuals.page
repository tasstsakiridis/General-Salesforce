<apex:page title="Sales Proposal Actuals" standardController="Promotion_Activity__c" extensions="SalesProposal_Actuals_Controller" tabStyle="Promotion_Activity__c" sidebar="false" docType="html-5.0" standardStylesheets="false" showHeader="false">
    <head>
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <meta name="description" content="" />
        <meta name="author" content="" />
        
        <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
        <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js" integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM" crossorigin="anonymous"></script>        
        <script src='https://ajax.googleapis.com/ajax/libs/jqueryui/1.12.1/jquery-ui.min.js'></script>
        <script src="https://www.b-fonline.com/salesforceresources/moment-with-locales.min.js"></script>
        <script src="https://www.b-fonline.com/salesforceresources/SFA/js/fastclick/lib/fastclick.js"></script>
        <script src="https://www.b-fonline.com/salesforceresources/SFA/lib/tokenize/Tokenize-2.4/jquery.tokenize.js"></script>
        
        <link rel="stylesheet" href="//ajax.googleapis.com/ajax/libs/jqueryui/1.12.1/themes/smoothness/jquery-ui.css" />
        <link rel="stylesheet" href="https://www.b-fonline.com/salesforceresources/fontawesome-5.5.0-web/css/all.min.css" />
        <!--<link rel="stylesheet" href="https://www.b-fonline.com/salesforceresources/SFA/css/accountSurvey.css" />-->
        <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous" />

    </head>
    <style>
        input.slds-input-clone {
            background-color: white;
            color: #16325c;
            border: 1px solid #d8dde6;
            border-radius: 0.25rem;
            -webkit-transition: border 0.1s linear, background-color 0.1s linear;
            transition: border 0.1s linear, background-color 0.1s linear;
            display: inline-block;
            padding: 0 1rem 0 0.75rem;
            line-height: 2.125rem;
            min-height: calc(2.125rem + 2px); 
            margin-bottom: 0.5rem;
        }
        .productName {
            min-width: 25%;
        }
        .sf-font {
            font: 100%/1.5 "Salesforce Sans", Arial, sans-serif;
        }
        .jplist-pagination-info{
            margin: 15px 15px 0 40px;
        }
        
        .jplist-items-per-page{
            margin: 15px 10px 0 0;
        }
        
        .jplist-pagination{
            margin: 10px 10px 0 30px;
        }
        .jplist-panel {
            border-style: none;
        }
        .jplist-checkbox-dropdown {
            width: 180px;
            margin: 20px 0 0 10px;
        }
        .jplist-checkbox-dropdown ul {
            width: 400px;
        }
        i.fa-plus:hover {
            cursor: pointer;
        }
        /*
        .center-block{
            width: 100%; 
            margin: 20px auto;
            background: #fff;               
            border: 1px solid #ddd;
            border-radius: 4px;
        }
        */
        .disabled {
            cursor: not-allowed;
            pointer-events: none;
            disabled: true;
            background-color: 'transparent';
            box-shadow: none;
            -webkit-box-shadow: none;
        }
        .input-group-label {
            text-align: right;
            width: 140px;
        }
        .section {
            background-color: #f3f2f2;
            margin: 20px 0;
            padding: 10px 0;
        }
        .section-header {
            font-weight: bold;
            text-align: center;
            width: 100%;
        }
        .panel-title {
            margin: 5px 15px;
        }
        .content {
            margin: 10px 0;
        }
    </style>            
    <script src="{!urlPrefix}/soap/ajax/35.0/connection.js" type="text/javascript"></script>
    <script>
        var j$ = jQuery.noConflict();

        //Initialize sforce Connection for MetaDataApi calls
        sforce.connection.sessionId = '{!$Api.Session_ID}';
        var urlPrefix = '{!urlPrefix}';
        if(urlPrefix == '/sales'){
            UserContext.siteUrlPrefix = urlPrefix;
            sforce.connection.serverUrl = urlPrefix + sforce.connection.serverUrl;
        }
        
        var filterRowsPerPage = 10;
        
        let thisProposal = [{!serializedProposal}][0];
        var theActuals = [{!serializedItems}][0];
        let pmaFS = [{!serializedPMAFS}][0];
        let readOnlyFields = [{!serializedReadOnlyFieldList}][0];
        var returnURL = "{!URLFOR($Action.Promotion_Activity__c.View, thisProposal.Id)}";
        var marketName = "{!marketName}";
        var dept = '{!$CurrentPage.Parameters.dept}';
        var deviceType;
        var redirect = false;
        var inSF1 = false;
        var isDesktop = true;
        var dept = "{!$CurrentPage.Parameters.dept}";
        var actualDateErrorMessage = "{!$Label.ActualDateErrorMessage}";        
        var picklistValuesMap = {};
        var obj_PMI = [{!serializedPMIActualsDescribe}][0];
console.log('obj_PMI', obj_PMI);
console.log('pmaFS', pmaFS);
        var monthNames = ['JANUARY','FEBRUARY','MARCH','APRIL','MAY','JUNE','JULY','AUGUST','SEPTEMBER','OCTOBER','NOVEMBER','DECEMBER'];
        var monthLabels = ['{!$Label.JANUARY}','{!$Label.FEBRUARY}','{!$Label.MARCH}','{!$Label.APRIL}','{!$Label.MAY}','{!$Label.JUNE}','{!$Label.JULY}','{!$Label.AUGUST}','{!$Label.SEPTEMBER}','{!$Label.OCTOBER}','{!$Label.NOVEMBER}','{!$Label.DECEMBER}'];
        
        //map to create corresponding HTML input type for Salesforce field type
        var inputTypeMap = {
            'boolean':  'checkbox',
            'double':   'number',
            'currency': 'number',
            'picklist': 'select',
            'reference':'link',
            'date':     'date',
            'percent':  'number',
            'textarea': 'text',
            'string':   'text'
        }

        j$(document).ready(function() {
            j$(function() {
                FastClick.attach(document.body);
            });
            
            if( (typeof sforce != 'undefined') && (sforce.one != null) ) {
                inSF1 = true;
            }else{
                inSF1 = false;
            }
                        
            //get window width to determine whether or not to use tokenize, 768 = tablet
            //sniff user agent to figure out if it's an iPad because screen resolution varies
            var IS_IPAD = navigator.userAgent.match(/iPad/i) != null;
            if(j$(window).width() >= 992 && !IS_IPAD){
                deviceType = 'desktop';
            }else{
                j$('#expandButton').show();             //for cards layout
                if(j$(window).width() >= 768){
                    deviceType = 'tablet';
                }else{
                    deviceType = 'phone';
                }
            }
            isDesktop = deviceType == 'desktop';
            
            j$.when(getPicklistValuesForRecordType('PMI_Actual__c')).then(buildCollapsibleSections());
            bindEvents(isDesktop);
        });
        
        function bindEvents(buildTokenize){       
            console.log('[bindEvents]');
            j$('.save').click(function() {
                //redirect to returnURL on click of save and close
                if(j$(this).hasClass('saveAndClose')){
                    redirect = true;
                }
                //check for connection, if offline display modal warning
                //alert(navigator.onLine);
                if(navigator.onLine){
                    //j$('.save').button('loading');
                    loading(true);
                    buildItemsToSave();
                }else{
                    j$('#offlineModal').modal();
                }                           
            });
            j$('.cancel').click(function(){
                if(inSF1) {
                    sforce.one.back(false);
                }else{
                    window.location.href = returnURL;
                }
            });
            
            j$('div.rowHeader').off("click");
            j$('div.rowHeader').click(function(){
                if(j$(this).siblings('.fields').hasClass('expanded')){
                    j$(this).removeClass('headerShadow').siblings('.fields').removeClass('expanded fieldsShadow').slideUp();
                }else{
                    j$(this).addClass('headerShadow').siblings('.fields').addClass('expanded fieldsShadow').slideDown();
                }
            });
            
        }
                
        function buildCollapsibleSections() {
            var ctr = 0;
            var collapsedStyle = 'in';
            var sectionId = ''; 
            var sectionHTML = '<div class="accordion" id="accordion" role="tablist" aria-multiselectable="true">';
                console.log('theActuals', theActuals);
                console.log('theProposal', thisProposal);
            j$.each(theActuals, function(key, value) {
                if (ctr > 0) { collapsedStyle = ''; }
                sectionId = 'Section' + value.id;
                // PMI Actuals
                sectionHTML += '<div class="card">';
                sectionHTML += '<div class="card-header" role="tab" id="' + value.id + '">';
                sectionHTML += '<h4>';
                sectionHTML += '<a role="button" data-toggle="collapse" data-target="#' + sectionId + '" data-parent="#accordion" aria-expanded="true" aria-controls="' + sectionId + '">' + value.productName + '</a>';
                sectionHTML += '</h4>';
                sectionHTML += '</div>'; // End-DIV card-header
                sectionHTML += '<div id="' + sectionId + '" class="collapse ' + (ctr == 0 ? 'show' : '') + ' p2" role="tabpanel" aria-labelledby="' + value.id + '">';
                sectionHTML += '<div class="card-body p-1">';
                sectionHTML += buildPanelBodyForItem(value);
                sectionHTML += '</div>'; // End-Div card-body section
                sectionHTML += '</div>'; // End-Div collapsible section
                sectionHTML += '</div>'; // End-Div card
                
                ctr++;
            });
            sectionHTML += '</div>';  // End-Div Accordion
            
            j$('div#content').append(sectionHTML); 
            if(marketName == 'Korea') {
                j$("input[field='Act_Qty__c']").change(function() {
                    var actualDiscount = 0;
                    let thisVal = j$(this).val();
                    let pmaId = j$(this).attr('data-pma-id');
                    let discount = j$(this).attr('data-proposed-discount');
                    console.log('[act qty changed] proposed discount', discount);
                    console.log('[act qty changed] actqty', thisVal);
                    if (thisVal != '') {
                        actualDiscount = thisVal * discount;
                    }
                    let selector = '#Actual_Discount__c'+pmaId;
                    console.log('selector', selector);
                    console.log('actualDiscount', actualDiscount);
                    if (actualDiscount == 0) {
                        j$(selector).text("");
                    } else {
                        j$(selector).text(actualDiscount.toFixed(2));
                    }
                });
                j$("input[field='Payment_Date__c']").change(function() {
                    var thisVal = j$(this).val();
                    if (thisVal != '') {
                        var d = new Date(thisVal);
                        if (d.getTime() < today.getTime()) {
                            // error
                            alert(actualDateErrorMessage);
                            j$(this).val('');
                        }
                    }
                });
                console.log('bind korea events');
                j$("select[field='Approval_Status__c']").change(function() {
                    console.log('approval status change event');
                    let thisVal = j$(this).val();
                    let pmaId = j$(this).attr('data-pma-id');
                    let selector = '#Payment_Date__c'+pmaId;
                    console.log('thisVal', thisVal);
                    console.log('selector', selector);
                    if (thisVal == 'Approved') {
                        j$(selector).text(moment().format('DD-MM-YYYY'));
                    } else {
                        j$(selector).text("");
                    }
                });
            }
        }
             
        function buildPanelBodyForItem(pmi) {
            var panelBodyHTML = '';
            var periodBodyHTML = '';
            var pma;
            var startDate = new Date(thisProposal.Promotion_Start_Date__c);
            var periodId = '';
            var periodHTML = '';
            j$.each(pmi.periods, function(key, value) {                
                periodId = 'Section-' + pmi.id + '-Period-' + value.period;
                periodHTML += '<div class="card mt-1">';
                periodHTML += '<div class="card-header p-1" role="tab" id="' + periodId + '">';
                periodHTML += '<h5 class="panel-title">' + value.month + ', ' + value.year + '</h5>';
                periodHTML += '</div>';  // End-Div card-header
                periodHTML += '<div class="card-body m-0 p-0" id="' + periodId + 'Body">';
                
                if (deviceType == 'desktop') {
                    var tableId = 'pmiTable' + periodId;
                    panelBodyHTML = '<div class="table-responsive col-md-12"><table id="' + tableId + '" class="pmiTable table table-striped"><thead class="headers"><tr>';
                    panelBodyHTML += '<th class="headerRow" data-column-id="period" scope="col" colspan="2"><div class="text-left">{!$ObjectType.PMI_Actual__c.Fields.Account__c.Label}</div></th>';
                    j$.each(pmaFS, function(key, value) {
                        panelBodyHTML += '<th class="headerRow" data-column-id="' + value.fieldPath + '" scope="col" colspan="1"><div>' + value.label + '</div></th>';
                    });
                    panelBodyHTML += '</tr></thead><tbody class="tableBody">';
                }
                    
                j$.each(value.accounts, function(key, value) {
                    pma = value;
                    var selector = (deviceType == 'desktop' ? 'tr' : 'div');
                    var rowId = "pma." + value.id;
                    var pmaHTML = '';
                    if (deviceType == 'desktop') {
                        pmaHTML = '<tr id="' + rowId + '" data-pma-id="' + value.id + '" >';
                        pmaHTML += '<td class="accountName" colspan="2"><span class="text-left">' + value.accountName + '</span></td>';
                    } else {
                        pmaHTML += '<div class="row" id="' + rowId + '" data-pma-id="' + value.id + '" >';
                        pmaHTML += '<div class="rowHeader headerShadow"><span class="accountName lead">' + value.accountName + '</span></div>';
                        pmaHTML += '<div class="fields mandatory fieldsShadow">';
                        
                    }
                    
                    var elementTag = 'div';
                    var section = 'cards';
                    var cssClass = ' col-xs-12 col-sm-6';
                    if (deviceType == 'desktop') { 
                        elementTag = 'td'; 
                        cssClass = '';
                        section = 'table';
                    }
                    j$.each(pmaFS, function(key, value) {
                        pmaHTML += '<' + elementTag + ' class="' + value.type + cssClass + '">' + buildInput(value, true, pma, pmi, section) + '</' + elementTag + '>';
                    });
                    if (deviceType == 'desktop') {
                        pmaHTML += '</tr>';
                    } else {
                        pmaHTML += '</div></div>';
                    }

                    panelBodyHTML += pmaHTML;

                });
                if (deviceType == 'desktop') {
                    panelBodyHTML += '</tbody></table></div>';
                    //j$('div#content').append(headerHTML);
                }

                

                periodHTML += panelBodyHTML;
                periodHTML += '</div>'; // End-Div card-body
                periodHTML += '</div>'; // End-Div card
            });

            return periodHTML;
        }
        //build out the actual input tags for each type
        function buildInput(obj, isNewRow, pma, pmi, section){
            var html = '';
            var value = '';
            if (pma != null) {
                value = pma.pmia[obj.fieldPath];
            }
            var objectName = 'PMI_Actual__c';

            if(value == undefined || value == 0){
                value = '';
            }
            if (obj.fieldPath == 'Actual_Discount__c' && value != '') {
                value = value.toFixed(2);
            }
            console.log('obj', obj);
            console.log('pma', pma);
            console.log('pmi', pmi);
            console.log('value', value);
            if (section == 'cards') {
                html += '<label for=pma-"' + pma.id + '-' + pma.period + '" class="fieldLabel">' + obj.label + '</label>';
            }
            var isReadOnly = false;
            var pos = readOnlyFields.indexOf(obj.fieldPath);            
            if (pos >= 0) {
                isReadOnly = true;
            } else {
                console.log('[buildInput] checking objPMI ' + obj.fieldPath, obj_PMI.fields[obj.fieldPath]);
                if (obj_PMI && obj_PMI.fields && obj_PMI.fields[obj.fieldPath]) {
                    isReadOnly = (obj_PMI.fields[obj.fieldPath].isUpdateable == false);
                }
            }
            console.log('isReadOnly', isReadOnly);
            console.log('dept', dept);
            if (dept == 'Finance') {
                let qty = parseInt(pma.pmia.Act_Qty__c) || 0;
                if (qty == 0) { isReadOnly = true; }
            } else {
                if (pma.pmia.Payment_Date__c != undefined && pma.pmia.Payment_Date__c != '') {
                    isReadOnly = true;
                }
            }
            
            //build the correct HTML input type, read only in Account Info section if not required on field set
            console.log('input type', inputTypeMap[obj.type]);
            console.log('isReadOnly', isReadOnly);
            switch(inputTypeMap[obj.type]){                             
                case 'number':
                    if (isReadOnly == true) {
                        html += '<span id="'+obj.fieldPath+pma.id+'" style="margin-bottom: 0.5rem; text-align: right;">'+value+'</span>';
                    } else {
                        html += '<input id="'+obj.fieldPath+pma.id+'" field="'+obj.fieldPath+'" type="'+inputTypeMap[obj.type]+'" data-pma-id="'+pma.id+'" step="any" data-proposed-discount="'+pma.pmia.Proposed_Discount__c+'" value="'+value+'" class="fieldInput slds-input" ' + (isReadOnly ? 'disabled' : '') + ' />';
                    }
                    break;
                case 'select':
                    if(isReadOnly == true){
                        html += '<span id="'+obj.fieldPath+pma.id+'" style="margin-bottom: 0.5rem;">'+value+'</span>';
                    }else{
                        html += '<select id="'+obj.fieldPath+'-'+pma.id+'" data-pma-id="'+pma.id+'" field="'+obj.fieldPath+'" class="fieldInput slds-select  "><option value=""></option>';
                        var options = getSelectOptions(obj.fieldPath, objectName);
                        console.log('options', options);
                        if (options != null) {
                            for(var i=0;i<options.values.length;i++){
                                if(value == options.values[i]){
                                    html+= '<option value="'+options.values[i]+'" selected>'+options.labels[i]+'</option>';
                                }else{
                                    html+= '<option value="'+options.values[i]+'">'+options.labels[i]+'</option>';
                                }
                            }
                        }
                        html += '</select>';
                    }
                    break;
                case 'checkbox':
                    if(isReadOnly == true){
                        html += '<input id="'+obj.fieldPath+'" field="'+obj.fieldPath+'" type="'+inputTypeMap[obj.type]+'" disabled="disabled" class="fieldInput cmn-toggle cmn-toggle-round-flat"/>';
                        html += '<label for="'+obj.fieldPath+'" class="'+section+'Checkbox"></label>';
                    }else{
                        if(value == true){
                            html += '<input id="'+obj.fieldPath+pma.id+'" field="'+obj.fieldPath+'" type="'+inputTypeMap[obj.type]+'" checked="checked" class="fieldInput cmn-toggle cmn-toggle-round-flat"/>';
                        }else{
                            html += '<input id="'+obj.fieldPath+pma.id+'" field="'+obj.fieldPath+'" type="'+inputTypeMap[obj.type]+'" class="fieldInput btn cmn-toggle cmn-toggle-round-flat"/>';
                        }
                        html += '<label for="'+obj.fieldPath+pma.id+'" class="'+section+'Checkbox"></label>';
                    }                    
                    break;
                case 'link':
                    
                    var relationshipName = obj.fieldPath.replace('__c', '__r');
                    var infoField = eval("pmiList." + relationshipName);
                    var relatedValue = '';
                    if (infoField != null && infoField != undefined) {
                        relatedValue = infoField.Name;
                    }
                    var lookupField;
                    for(var i = 0; i < relationships.length; i++) {
                        if (relationships[i].name == obj.fieldPath) {
                            lookupField = relationships[i];
                            break;
                        }
                    }
                                        
                    if (lookupField) {                            
                        html += '<div id="' + obj.fieldPath + '">';

                        $Lightning.use("c:CustomLookup", function() {
                            $Lightning.createComponent(
                                "c:lookupComponent",
                                { searchString: relatedValue, recordId: value, label:obj.fieldPath, pluralLabel: '', sObjectAPIName: lookupField.objectName, filterClause: lookupField.filter, listIconSVGPath:"/resource/SLDS091/assets/icons/standard-sprite/svg/symbols.svg#account", listIconClass:"slds-icon-standard-account"},
                                obj.fieldPath,
                                function(cmp) {
                                }
                            );
                        });
                    }
                    break;
                case 'date':
                    if (isReadOnly == true) {
                        html += '<span id="'+obj.fieldPath+pma.id+'" style="margin-bottom: 0.5rem;">'+value+'</span>';
                    } else {
                        html += '<input id="'+obj.fieldPath+pma.id+'" field="'+obj.fieldPath+'" class="'+inputTypeMap[obj.type]+'Input slds-input-clone" type="'+inputTypeMap[obj.type]+'" value="'+value+'" ' + (isReadOnly == true ? 'disabled' : '') + ' />';
                    }
                    break;
                default:
                    if (obj.type == 'textarea') {
                        html += '<textarea id="'+obj.fieldPath+pma.id+'" field="'+obj.fieldPath+'" type="'+inputTypeMap[obj.type]+'" value="'+value+'" class="fieldInput slds-textarea" row="4" ' + (isReadOnly == true ? 'disabled' : '') + '/>';
                    } else {
                        html += '<input id="'+obj.fieldPath+pma.id+'" field="'+obj.fieldPath+'" type="'+inputTypeMap[obj.type]+'" value="'+value+'" class="fieldInput slds-input" ' + (isReadOnly == true ? 'disabled' : '') + '/>';
                    }
            } 
            return html;               
        }
                
        //toggle loading gif and saved message
        function loading(val) {
            if (val) {
                j$('.spinner-border').removeClass('d-none');
                j$('.btn').prop('disabled', true);
            } else {
                j$('.spinner-border').addClass('d-none');
                j$('.btn').prop('disabled', false);
            }
        }
        
        function buildItemsToSave() {
            var selector = '.panel-body .row';   
            if (deviceType == 'desktop') {
                selector = '.pmiTable tbody tr';
            }
            var isOKToSave = true;
            var items = [];
            var tt = j$(selector);
            console.log('# of items selected: ' + tt.length);
            j$(selector).each(function() {
                var pma = {};
                var row = j$(this);
                var pmaId = this.getAttribute('data-pma-id');
                var pmiId = this.getAttribute('data-pmi-id');
                var externalKey = this.getAttribute('data-external-key');
                var period = this.getAttribute('data-period-idx');
                
                pma['Id'] = pmaId == '' ? null : pmaId;
                
                j$(row).find('input,select,textarea').each(function() {
                    var fld = j$(this);
                    var fldName = fld.attr('field');
                    if (fld.is('input')) {
                        if (fld.is(':checkbox')) {
                            pma[fldName] = fld.is(':checked');
                        } else if (fld.prop('type') == 'date') {
                            if (fld.val() != null && fld.val().length > 0) {
                               var d = new Date(fld.val());
                               var dd = ('00' + d.getDate()).slice(-2);
                               var mm = ('00' + (d.getMonth()+1)).slice(-2);
                                pma[fldName] = d.getFullYear() + '-' + mm + '-' + dd;
                            }
                        } else {
                            pma[fldName] = fld.val();
                        }
                    } else if (fld.is('textarea')) {
                        pma[fldName] = fld.val();
                    } else if (fld.is('select')){
                        pma[fldName] = fld.find(':selected').text();
                    }
                }); 
                
                if (pma.Act_Qty__c == "") { pma.Act_Qty__c = 0; }
                if (pma.Actual_A_P__c == "") { pma.Actual_A_P__c = 0; }
                if (pma.Actual_Free_Bottle_Qty__c == "") { pma.Actual_Free_Bottle_Qty__c = 0; }
                let actQty = parseInt(pma.Act_Qty__c) || 0;
                let actAP = parseInt(pma.Actual_A_P__c) || 0;
                let actFreeQty = parseInt(pma.Actual_Free_Bottle_Qty__c) || 0; 
                console.log('actQty: ', actQty);
                console.log('actAP', actAP);
                console.log('actFreeQty', actFreeQty);
                if (actQty + actAP + actFreeQty > 0) {
                    items.push(pma);
                }
                
                for(var p in pma) {
                    console.log(p + ' : ' + pma[p]);
                }
            });

            console.log('[buildItemsToSave] items', items);
            if (isOKToSave) {
                SalesProposal_Actuals_Controller.save(JSON.stringify(items), thisProposal.Id, redirect, function(result, event) {
                    loading(false);
                    if (event.status) {
                        //if save and close is clicked, redirect to returnURL
                        loading(false);
                        if(redirect){
                            if(inSF1) {
                                sforce.one.back(false);
                            }else{
                                window.location.href = returnURL;
                            }
                        } else {
                            // rebuild rows with returned data
                            //j$(selector).remove();
                            //pmaList = result;
                            //buildCollapsibleSections();
                        }
                    } else {
                        //handling errors.
                        j$(".loadingImage").css('visibility', 'hidden');    
                        j$(".savedMessage").fadeOut();    
                        
                        alert(event.message);
                    }
                });
            } else {
                loading(false);                
            }
        }
        
        //get all picklist values for this market's recordtype
        function getPicklistValuesForRecordType (objectName) {
            var bigString = [];
            var recordTypeId = "{!proposalRecordTypeId}";

            var vl = {};
            var recordTypeMappings = sforce.connection.describeLayout(objectName).recordTypeMappings;
            console.log('recordTypeMappings', recordTypeMappings);
            console.log('recordTypeId', recordTypeId);
            
            try {
                console.log('recordTypeMappings.length', recordTypeMappings.length);
                if(recordTypeMappings.length == undefined){
                    for(var x=0; x<recordTypeMappings.picklistsForRecordType.length; x++){
                        vl = returnPickListValue(recordTypeMappings.picklistsForRecordType[x]);
                    var field = {
                            name: recordTypeMappings.picklistsForRecordType[x].picklistName,
                        //values: returnPickListValue(recordTypeMappings.picklistsForRecordType[x])                        
                        values: vl.values,
                        labels: vl.labels
                    };                           
                    bigString.push(field);
                }
                }else{
                    for (var i=0; i <recordTypeMappings.length; i++) {
                        if (recordTypeMappings[i].recordTypeId == recordTypeId){
                            console.log('picklistsforrecordtype', recordTypeMappings[i].picklistsForRecordType);
                            if (recordTypeMappings[i].picklistsForRecordType.length == undefined) {
                                vl = returnPickListValue(recordTypeMappings[i].picklistsForRecordType);
                                var field = {
                                    name: recordTypeMappings[i].picklistsForRecordType.picklistName,
                                    values: vl.values,
                                    labels: vl.labels
                                };                          
                                bigString.push(field);
                                console.log('vl', vl);
                                console.log('field', field);
                            } else {                            
                                for(var x=0; x<recordTypeMappings[i].picklistsForRecordType.length; x++){
                                    vl = returnPickListValue(recordTypeMappings[i].picklistsForRecordType[x]);
                                    var field = {
                                        name: recordTypeMappings[i].picklistsForRecordType[x].picklistName,
                                        //values: returnPickListValue(recordTypeMappings[i].picklistsForRecordType[x])                        
                                        values: vl.values,
                                        labels: vl.labels
                                    };                          
                                    bigString.push(field);
                                }
                            }
                        }
                    }
                }
            }catch(ex) {
                console.log('ex', ex);
            }

            picklistValuesMap[objectName] = bigString;
            console.log('picklistValuesMaps', picklistValuesMap);
            
        }
        
        //get the individual values        
        function returnPickListValue (obj) {
            var values = [];
            var labels = [];
            if (obj.picklistValues) {
                if (obj.picklistValues.label == undefined) {
                    for (var y=0; y <obj.picklistValues.length; y++) {
                        values.push(obj.picklistValues[y].value);
                        labels.push(obj.picklistValues[y].label);
                        }
                } else {
                    values.push(obj.picklistValues.value);
                    labels.push(obj.picklistValues.label);
                }
            }
            return {values: values, labels: labels};
        }
        
        //find the picklist values for this field
        function getSelectOptions(fieldName, objectName){
            for(var i=0;i<picklistValuesMap[objectName].length;i++){
                if(picklistValuesMap[objectName][i].name == fieldName){
                    return picklistValuesMap[objectName][i];
                }
            }
            return {values:[], labels:[]};
        }        

    </script>
    <div class="bootstrap" style="height:100%">
        <div class="container-fluid theme-showcase" role="main">  
            <div class="card border-0">
                <div id="header" class="card-header border-0">
                    <h4 style="display: inline;">{!thisProposal.Name}</h4>
                    <div class="btn-group float-right" role="group" aria-label="Page buttons">
                        <button type="button" value="{!$Label.Save}" class="btn btn-secondary save" data-role="none" data-loading-text="{!$Label.Saving}">
                            <span class="spinner-border spinner-border-sm d-none" role="status" aria-hidden="true"></span>
                            <span class="btn-label">{!$Label.Save}</span>
                        </button>
                        <button type="button" value="{!$Label.Save_and_Close}" class="btn btn-secondary save saveAndClose" data-role="none" data-loading-text="{!$Label.Saving}">
                            <span class="spinner-border spinner-border-sm d-none" role="status" aria-hidden="true"></span>
                            <span class="btn-label">{!$Label.Save_and_Close}</span>
                        </button>
                        <button type="button" value="{!$Label.Cancel}" class="btn btn-secondary cancel" data-role="none">
                            <span>{!$Label.Cancel}</span>
                        </button>
                    </div>
                </div>  
                <div class="card-body">
                    <div class="clear"></div>
                    <div id="content" class="content">
                    </div>
                </div>              
                <div class="card-footer text-center">
                    <div class="btn-group" role="group" aria-label="Page buttons">
                        <button type="button" value="{!$Label.Save}" class="btn btn-secondary save" data-role="none" data-loading-text="{!$Label.Saving}">
                            <span class="spinner-border spinner-border-sm d-none" role="status" aria-hidden="true"></span>
                            <span class="btn-label">{!$Label.Save}</span>
                        </button>
                        <button type="button" value="{!$Label.Save_and_Close}" class="btn btn-secondary save saveAndClose" data-role="none" data-loading-text="{!$Label.Saving}">
                            <span class="spinner-border spinner-border-sm d-none" role="status" aria-hidden="true"></span>
                            <span class="btn-label">{!$Label.Save_and_Close}</span>
                        </button>
                        <button type="button" value="{!$Label.Cancel}" class="btn btn-secondary cancel" data-role="none">
                            <span>{!$Label.Cancel}</span>
                        </button>
                    </div>
                </div>
            </div>          

            
            <div id="offlineModal" class="modal fade" role="dialog">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <button type="button" class="close" data-dismiss="modal">&times;</button>
                            <h4 class="modal-title">{!$Label.No_Connection}</h4>
                        </div>
                        <div class="modal-body">
                            <p>{!$Label.Find_Connection}</p>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-default" data-dismiss="modal">{!$Label.Close}</button>
                        </div>
                    </div>
                </div>
            </div>
            <div id="clearFormModal" class="modal fade" role="dialog">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <button type="button" class="close" data-dismiss="modal">&times;</button>
                            <h4 class="modal-title">{!$Label.Clear_Form}</h4>
                        </div>
                        <div class="modal-body">
                            <p>{!$Label.Clear_Form_Confirm}</p>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-default" data-dismiss="modal">{!$Label.Cancel}</button>
                            <button id="clearFormConfirm" type="button" value="{!$Label.Clear_Form}" class="btn button clearForm btn-danger" data-dismiss="modal" onclick="clearForm()" >{!$Label.Clear_Form}</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <script> 
        (function(){try{var a=navigator.userAgent; 
        if((a.indexOf('Salesforce')!=-1)&&(a.indexOf('iPhone')!=-1||a.indexOf('iPad')!=-1)&&(a.indexOf('OS/8')!=-1||a.indexOf('OS 8')!=-1||a.indexOf('OS/9')!=-1||a.indexOf('OS 9')!=-1)&&(a.indexOf('Safari')==-1)){ 
        var s=document.createElement('style'); 
        s.innerHTML="html,html body{overflow: auto;-webkit-overflow-scrolling:touch;}body{position:absolute;left:0;right:0;top:0;bottom:0;}"; 
        document.getElementsByTagName('head')[0].appendChild(s);}}catch(e){}})(); 
        window.onkeydown=function(){window.focus();}
    </script> 
</apex:page>